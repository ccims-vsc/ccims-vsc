{
	"name": "ccims-vsc",
	"description": "CCIMS - Cross-Component Issue Management System integration ",
	"version": "0.1.0",
	"publisher": "nk-coding",
	"engines": {
		"vscode": "^1.50.0"
	},
	"extensionKind": [
		"ui",
		"workspace"
	],
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onView:ccims.issueView",
		"onView:ccims.issueList",
		"onCommand:ccims.reloadIssueList",
		"onCommand:ccims.checkApiStatus",
		"onCommand:ccims.selectComponent",
		"onCommand:ccims.newIssue",
		"onCommand:ccims.setupExtension",
		"onCommand:ccims.login",
		"onCommand:ccims.createArtifact"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/nk-coding/ccims-vsc.git"
	},
	"main": "./dist/extension",
	"contributes": {
		"viewsContainers": {
			"activitybar": [
				{
					"id": "issue-explorer",
					"title": "CCIMS explorer",
					"icon": "$(type-hierarchy)"
				}
			]
		},
		"views": {
			"issue-explorer": [
				{
					"type": "webview",
					"id": "ccims.componentView",
					"name": "Component",
					"visibility": "visible"
				},
				{
					"type": "tree",
					"id": "ccims.issueList",
					"name": "Issues",
					"visibility": "visible"
				},
				{
					"type": "webview",
					"id": "ccims.issueView",
					"name": "Issue",
					"visibility": "visible"
				}
			]
		},
		"configuration": {
			"title": "CCIMS",
			"properties": {
				"ccims.url": {
					"type": "string",
					"default": "http://localhost:8080",
					"description": "The endpoint of the used CCIMS instance",
					"scope": "window"
				},
				"ccims.componentId": {
					"type": "string",
					"default": "",
					"description": "The id of the component, of which issues should be displayed",
					"scope": "window"
				},
				"ccims.complexListIcons": {
					"type": "boolean",
					"default": true,
					"description": "If true, complex icons are used in issue list views",
					"scope": "window"
				},
				"ccims.artifactSchemas": {
					"type": "array",
					"description": "Configuration for artifacts",
					"items": {
						"type": "object",
						"properties": {
							"matchesRepositoryUrl": {
								"type": "string",
								"description": "The regex used to match the repositoryURL"
							},
							"componentName": {
								"type": "array",
								"description": "Regexes used for transformation of the componentURL to a componentName\nThe component name can be used in later steps by adding ${name} to a replace string",
								"items": {
									"type": "object",
									"properties": {
										"regexp": {
											"type": "string",
											"description": "see replaceAll parameter regexp"
										},
										"newSubstr": {
											"type": "string",
											"description": "see replaceAll parameter newSubstr"
										}
									}
								}
							},
							"matchesArtifactUrl": {
								"type": "string",
								"description": "All recognized artifacts must match this Regex"
							},
							"urlToPath": {
								"type": "array",
								"description": "Regexes used to transform an artifact URL to a relative path",
								"items": {
									"type": "object",
									"properties": {
										"regexp": {
											"type": "string",
											"description": "see replaceAll parameter regexp"
										},
										"newSubstr": {
											"type": "string",
											"description": "see replaceAll parameter newSubstr"
										}
									}
								}
							},
							"pathToUrl": {
								"type": "array",
								"description": "Regexes used to transofrm a relative path to an artifact url",
								"items": {
									"type": "object",
									"properties": {
										"regexp": {
											"type": "string",
											"description": "see replaceAll parameter regexp"
										},
										"newSubstr": {
											"type": "string",
											"description": "see replaceAll parameter newSubstr"
										}
									}
								}
							},
							"pathToUrlFilter": {
								"type": "array",
								"description": "Regexes used to transform a relative path to a filter regex which is sent to the api",
								"items": {
									"type": "object",
									"properties": {
										"regexp": {
											"type": "string",
											"description": "see replaceAll parameter regexp"
										},
										"newSubstr": {
											"type": "string",
											"description": "see replaceAll parameter newSubstr"
										}
									}
								}
							}
						}
					},
					"default": [
						{
							"matchesRepositoryUrl": "github\\.com",
							"componentName": [
								{
									"regexp": "^http(s)?://(www\\.)?github\\.com/",
									"newSubstr": ""
								},
								{
									"regexp": "/$",
									"newSubstr": ""
								}
							],
							"matchesArtifactUrl": "^http(s)?://(www\\.)?github\\.com/${name}/blob",
							"urlToPath": [
								{
									"regexp": "^http(s)?://(www\\.)?github\\.com/[^/]+/[^/]+/blob/[^/]+/",
									"newSubstr": ""
								}
							],
							"pathToUrl": [
								{
									"regexp": "^",
									"newSubstr": "https://github.com/${name}/blob/main/"
								}
							],
							"pathToUrlFilter": [
								{
									"regexp": "^",
									"newSubstr": "http(s)?://(www\\.)?github\\.com/${name}/blob/[^/]+/"
								}
							]
						}
					]
				}
			}
		},
		"commands": [
			{
				"command": "ccims.reloadIssueList",
				"title": "Reload Issue list",
				"category": "CCIMS",
				"icon": "$(refresh)"
			},
			{
				"command": "ccims.checkApiStatus",
				"title": "Check api status",
				"category": "CCIMS"
			},
			{
				"command": "ccims.selectComponent",
				"title": "Select component",
				"category": "CCIMS"
			},
			{
				"command": "ccims.newIssue",
				"title": "Create new issue",
				"category": "CCIMS",
				"icon": "$(add)"
			},
			{
				"command": "ccims.setupExtension",
				"title": "Setup extension",
				"category": "CCIMS"
			},
			{
				"command": "ccims.login",
				"title": "Login",
				"category": "CCIMS"
			},
			{
				"command": "ccims.createArtifact",
				"title": "Create Artifact at current position",
				"category": "CCIMS"
			},
			{
				"command": "ccims.activateFileFilter",
				"title": "  Filter for issues in file",
				"category": "CCIMS",
				"icon": "$(issues)"
			},
			{
				"command": "ccims.deactivateFileFilter",
				"title": "Don't filter for file",
				"category": "CCIMS",
				"icon": "$(file)"
			},
			{
				"command": "ccims.toggleFilterUnclassified",
				"title": "Toggle if unclassified issues are shown",
				"category": "CCIMS",
				"icon": "$(issues)"
			},
			{
				"command": "ccims.toggleFilterBugs",
				"title": "Toggle if bugs are shown",
				"category": "CCIMS",
				"icon": "$(bug)"
			},
			{
				"command": "ccims.toggleFilterFeatureRequests",
				"title": "Toggle if feature requests are shown",
				"category": "CCIMS",
				"icon": "$(lightbulb)"
			},
			{
				"command": "ccims.toggleFilterOpen",
				"title": "Toggle if open issues are shown",
				"category": "CCIMS",
				"icon": "$(issues)"
			},
			{
				"command": "ccims.toggleFilterClosed",
				"title": "Toggle if closed issues are shown",
				"category": "CCIMS",
				"icon": "$(pass)"
			},
			{
				"command": "ccims.toggleFilterSelfAssigned",
				"title": "Toggle if only self-assigned issues are shown",
				"category": "CCIMS",
				"icon": "$(star)"
			}
		],
		"menus": {
			"view/title": [
				{
					"command": "ccims.reloadIssueList",
					"when": "view == ccims.issueList",
					"group": "navigation"
				},
				{
					"command": "ccims.newIssue",
					"when": "view == ccims.issueList",
					"group": "navigation"
				}
			],
			"editor/context": [
				{
					"command": "ccims.createArtifact",
					"group": "CCIMS"
				}
			],
			"editor/title": [
				{
					"command": "ccims.activateFileFilter",
					"group": "navigation"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "ccims.issueList",
				"contents": "In order to use CCIMS features, please open a folder.\n[Open Folder](command:vscode.openFolder)",
				"when": "workbenchState == empty"
			},
			{
				"view": "ccims.issueList",
				"contents": "The api URL is currently not set\n[Setup extension](command:ccims.setupExtension)\n[Open Settings](command:workbench.action.openSettings2)",
				"when": "workbenchState != empty && ccims.apiStatus == 2"
			},
			{
				"view": "ccims.issueList",
				"contents": "The api is currently not available.\n[Setup extension](command:ccims.setupExtension)\n[Check again](command:ccims.checkApiStatus)\n[Open Settings](command:workbench.action.openSettings2)",
				"when": "workbenchState != empty && ccims.apiStatus == 3"
			},
			{
				"view": "ccims.issueList",
				"contents": "You are currently not logged in.\n[Login](command:ccims.login)",
				"when": "workbenchState != empty && ccims.apiStatus == 4"
			},
			{
				"view": "ccims.issueList",
				"contents": "Your login data is invalid.\n[Login](command:ccims.login)",
				"when": "workbenchState != empty && ccims.apiStatus == 5"
			},
			{
				"view": "ccims.issueList",
				"contents": "There is no component configured\n[Select component](command:ccims.selectComponent)\n[Open Settings](command:workbench.action.openSettings2)",
				"when": "workbenchState != empty && ccims.apiStatus == 6"
			},
			{
				"view": "ccims.issueList",
				"contents": "The currently configured component does not exist or is not accessible\n[Select component](command:ccims.selectComponent)\n[Open Settings](command:workbench.action.openSettings2)",
				"when": "workbenchState != empty && ccims.apiStatus == 7"
			},
			{
				"view": "ccims.issueList",
				"contents": "There are no issues on the selected component\n[Create issue](command:ccims.newIssue)\n[Select component](command:ccims.selectComponent)",
				"when": "workbenchState != empty && ccims.apiStatus == 1"
			}
		],
		"keybindings": [
			{
				"command": "ccims.createArtifact",
				"key": "Ctrl+Alt+A"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run build",
		"compile": "webpack --mode production",
		"lint": "eslint . --ext .ts,.tsx",
		"init-all": "npm i && cd issue-view && npm i && cd .. && cd component-view && npm i",
		"build": "npm run build-issue-view && npm run build-component-view && npm run compile",
		"build-issue-view": "cd issue-view && npm run build",
		"build-component-view": "cd component-view && npm run build",
		"graphql-codegen": "graphql-codegen --config codegen.yml"
	},
	"devDependencies": {
		"@graphql-codegen/add": "^2.0.2",
		"@graphql-codegen/cli": "1.21.5",
		"@graphql-codegen/typescript": "1.22.1",
		"@graphql-codegen/typescript-graphql-request": "^3.2.1",
		"@graphql-codegen/typescript-operations": "1.18.0",
		"@types/node": "^15.12.1",
		"@types/vscode": "^1.50.0",
		"@typescript-eslint/eslint-plugin": "^4.16.0",
		"@typescript-eslint/parser": "^4.16.0",
		"@vue/eslint-config-typescript": "^7.0.0",
		"eslint": "^7.21.0",
		"eslint-plugin-vue": "^7.10.0",
		"ts-loader": "^9.2.3",
		"typescript": "^4.2.2",
		"webpack": "^5.39.1",
		"webpack-cli": "^4.7.2"
	},
	"dependencies": {
		"axios": "^0.21.1",
		"bufferutil": "^4.0.3",
		"graphql": "^15.5.0",
		"graphql-tools": "^7.0.5",
		"keytar": "^7.7.0",
		"utf-8-validate": "^5.0.5"
	},
	"optionalDependencies": {
		"bufferutil": "^4.0.3",
		"utf-8-validate": "^5.0.5"
	}
}
